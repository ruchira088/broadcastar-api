version: 2.1

alias:
  - &restore-sbt-cache
    keys:
      - sbt-cache-{{ checksum "project/build.properties" }}-{{ checksum "project/plugins.sbt" }}-{{ checksum "project/Dependencies.scala" }}
      - sbt-cache

  - &git
    name: Install Git and CA-certificates
    command: |
      apt update && \
      apt install git apt-transport-https bc ca-certificates software-properties-common -y

  - &ansible
    name: Install Ansible
    command: |
      apt update && \
      apt install software-properties-common python-pip -y

      pip install ansible boto3 botocore

  - &sbt
    name: Install sbt
    command: |
      apt update && \
      apt install apt-transport-https bc ca-certificates software-properties-common -y

      echo "deb https://dl.bintray.com/sbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list && \
      apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 && \
      apt update && \
      apt install sbt -y

  - &terraform
    name: Install Terraform
    command: |
      apt update && \
      apt install unzip curl -y

      curl -L -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_"${TERRAFORM_VERSION}"_linux_amd64.zip && \
      unzip -d /tmp /tmp/terraform.zip && \
      chmod +x /tmp/terraform && \
      mv /tmp/terraform /usr/local/bin
    environment:
      TERRAFORM_VERSION: 0.12.4

  - &aws-cli
    name: Install AWS CLI
    command: |
      apt update && \
      apt install python-pip python-dev build-essential -y

      pip install awscli --upgrade --user && \
      ln -sf $HOME/.local/bin/aws /usr/local/bin

  - &docker-client
    name: Install Docker client
    command: |
      apt update && \
      apt install curl -y

      curl -L -o /tmp/docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-"${DOCKER_VERSION}".tgz && \
      tar -xv -C /tmp -f /tmp/docker.tgz && \
      mv /tmp/docker/* /usr/local/bin
    environment:
      DOCKER_VERSION: 18.09.6

  - &kubectl
    name: Install kubectl
    command: |
      apt update && \
      apt install curl gnupg2 apt-transport-https -y

      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
      echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list && \
      apt update && \
      apt install -y kubectl

  - &kops
    name: Install kops
    command: |
      apt update && \
      apt install curl -y

      curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64 && \
      chmod +x kops-linux-amd64 && \
      mv kops-linux-amd64 /usr/local/bin/kops

executors:
  ubuntu:
    docker:
      - image: ubuntu:18.04

  open-jdk:
    docker:
      - image: openjdk:8-jdk

commands:
  compile_and_test:
    parameters:
      sbt_project:
        type: string
    steps:
      - run: *sbt
      - checkout
      - restore_cache: *restore-sbt-cache
      - run:
          name: Fetch dependencies
          command: sbt update
      - run:
          name: Compile
          command: sbt << parameters.sbt_project >>/compile
      - run:
          name: Run unit tests
          command: sbt << parameters.sbt_project >>/test
      - save_cache:
          key: sbt-cache-{{ checksum "project/build.properties" }}-{{ checksum "project/plugins.sbt" }}-{{ checksum "project/Dependencies.scala" }}
          paths:
            - ~/.sbt
            - ~/.coursier

  create_aws_resources:
    parameters:
      project:
        type: string
    steps:
      - run: *git
      - run: *ansible
      - run: *terraform
      - checkout
      - run:
          name: Create AWS resources
          command: ansible-playbook << parameters.project >>/ci/ansible/aws-resources.yml

jobs:
  shared_create_aws_resources:
    executor: ubuntu
    steps:
      - create_aws_resources:
          project: shared

  user_create_aws_resources:
    executor: ubuntu
    steps:
      - create_aws_resources:
          project: user-service

  user_compile_and_test:
    executor: open-jdk
    steps:
      - compile_and_test:
          sbt_project: userService

  user_build_and_push_docker_image:
    executor: open-jdk
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - run: *sbt
      - run: *ansible
      - run: *docker-client
      - run: *aws-cli
      - run: *terraform
      - checkout
      - restore_cache: *restore-sbt-cache
      - run:
          name: Build and push production Docker image to ECR
          command: |
            ansible-playbook user-service/ci/ansible/docker-image.yml \
              --extra-vars "circle_ci_build_number=$CIRCLE_BUILD_NUM"

  user_deploy:
    executor: ubuntu
    steps:
      - run: *git
      - run: *ansible
      - run: *terraform
      - run: *kubectl
      - run: *kops
      - checkout
      - run:
          name: Deploy to K8s cluster
          command: |
            ansible-playbook user-service/ci/ansible/k8s-deploy.yml

  message_compile_and_test:
    executor: open-jdk
    steps:
      - compile_and_test:
          sbt_project: messageService

  email_compile_and_test:
    executor: open-jdk
    steps:
      - compile_and_test:
          sbt_project: emailService

workflows:
  version: 2

  shared:
    jobs:
      - shared_create_aws_resources:
          context: aws-credentials

  user_service:
    jobs:
      - user_create_aws_resources:
          context: aws-credentials

      - user_compile_and_test

      - user_build_and_push_docker_image:
          context: aws-credentials
          requires:
            - user_create_aws_resources
            - user_compile_and_test

      - user_deploy:
          context: aws-credentials
          requires:
            - user_build_and_push_docker_image

  message_service:
    jobs:
      - message_compile_and_test

  email_service:
    jobs:
      - email_compile_and_test


